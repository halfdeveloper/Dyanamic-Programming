152. Maximum Product Subarray
Given an integer array nums, find a 
subarray
 that has the largest product, and return the product.

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.
 

Constraints:

1 <= nums.length <= 2 * 104
-10 <= nums[i] <= 10
The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.




*************************************************************************
// class Solution {
//     public int maxProduct(int[] nums) {
//        if(nums.length==1)
//         {
//             return nums[0];
//         }
//         int maxi=nums[0];
//         int cuurMax=nums[0];
//         for(int i=1;i<nums.length;i++)
//         {
//             cuurMax=Math.max(nums[i],nums[i]*cuurMax);
//             maxi=Math.max(cuurMax,maxi);
//         }
//         return maxi;
        
//     }
// }
// 1 ms
class Solution {
    public int maxProduct(int[] nums) {
        int len = nums.length;
        if (len == 0) {
            return 0;
        }
        int[] max = new int[len];
        int[] min = new int[len];
        max[0] = nums[0];
        min[0] = nums[0];
        for (int i = 1; i < len; i++) {
            max[i] = Math.max(Math.max(max[i - 1] * nums[i], min[i - 1] * nums[i]), nums[i]);
            min[i] = Math.min(Math.min(max[i - 1] * nums[i], min[i - 1] * nums[i]), nums[i]);
        }
        int result = nums[0];
        for (int i = 1; i < len; i++) {
            result = Math.max(result, max[i]);
        }
        return result;
    }
}
************************************************************************************
