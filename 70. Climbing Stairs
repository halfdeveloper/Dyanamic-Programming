70. Climbing Stairs.

You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45.

*---------------------------------------------------------------------------------------------------------------------------------*

class Solution {
    public int climbStairs(int n) {
        //the first example has tell us how many distinct way for 1 or 2 steps stairs
        int firstStep  = 1;     
        int secondStep = 2;     
        int tmp = 0;        
        
        if(n<=2)    //if n not more than 2 than just return the stpes it take
        {
            return n;
        }
        else
        {
            for(int i =3; i<=n;i++) //every iteration,will add the last two steps together and save as 'second'
            {
                tmp = secondStep;       
                secondStep+=firstStep;      //set second as now iteration needed steps
                firstStep = tmp;        //set first as the last time needed steps
            }
        }
        return secondStep;
        
    }
}
